@using System.Timers
@inject ChatMessageRepository ChatMessageRepository

<div class="row">
    <div class="col-md-12">
        @if (_chatMessages.Length > 0)
        {
            <div class="chat-section">
                <ul>
                    @foreach (var chatMessage in _chatMessages)
                    {
                        bool isLeft = _chatMessages[_chatMessages.Length - 1].From.Equals(chatMessage.From);

                        <li>
                            <div class="@(isLeft ? "left-chat" : "right-chat")">
                                <img src="images/@chatMessage.From.ToLower()-logo.png">
                                <p>@chatMessage.Text</p>
                                <span>@TimeUtils.FormatRelativeTime(chatMessage.Time)</span>
                            </div>
                        </li>
                    }
                </ul>
            </div>
        }
        else
        {
            <p>
                There aren't any messages yet. Why don't you write one?
            </p>
        }
    </div>
</div>

@code {
    private ChatMessage[] _chatMessages = new ChatMessage[0];
    private Timer _timer = new Timer(1000);

    protected override void OnInitialized()
    {
        _timer.Elapsed += async (sender, args) => await TickAsync();
        _timer.Start();
    }

    private async Task TickAsync()
    {
        _chatMessages = (await ChatMessageRepository.GetChatMessagesAsync())
            .OrderByDescending(m => m.Time)
            .ToArray();
        StateHasChanged();
    }
}